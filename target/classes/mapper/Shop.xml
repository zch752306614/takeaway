<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xc.takeaway.reponsitory.ShopReponsitory">
    <select id="shoplist" parameterType="com.xc.takeaway.utils.Shop" resultType="com.xc.takeaway.utils.Shop">
        SELECT * FROM t_sys_shopinfo WHERE shop_type=#{shop_type} and delete_flag=0
    </select>

    <select id="oneShop" parameterType="com.xc.takeaway.utils.Shop" resultType="com.xc.takeaway.utils.Shop">
        SELECT * FROM t_sys_shopinfo WHERE shop_num=#{shop_num} and delete_flag=0
    </select>

    <update id="updateShop" parameterType="com.xc.takeaway.utils.Shop" >
        update  t_sys_shopinfo set shop_name=#{shop_name}  ,shop_place=#{shop_place} ,shop_type=#{shop_type} ,shop_img=#{shop_img} where id=#{id}
    </update>

    <update id="updateScore" parameterType="com.xc.takeaway.utils.Shop" >
        update  t_sys_shopinfo
        set pack_score=#{pack_score} ,
        taste_score=#{taste_score} ,
        send_score=#{send_score},
        shop_score=#{shop_score}
        where id=#{id}
    </update>

    <update id="deleteShop" parameterType="com.xc.takeaway.utils.Shop" >
        update  t_sys_shopinfo set delete_flag=1 where id=#{id}
    </update>

    <update id="deleteUserShop">
        update  t_sys_user set shop_num=null where shop_num=${shopNum}
    </update>

    <insert id="insertShop" parameterType="com.xc.takeaway.utils.Shop" >
        insert into t_sys_shopinfo values(#{id},#{shop_score},#{taste_score},#{pack_score},#{shop_img},#{send_time},
        #{distance},#{sell_start},#{distribution_price},#{average},#{shop_num},#{send_score},#{shop_name},#{shop_type},
        #{shop_place},#{send_service},0,0)
    </insert>

    <insert id="insertSelfshop" parameterType="com.xc.takeaway.utils.Shop" >
        insert into t_sys_shopinfo(id,shop_score,taste_score,pack_score,shop_img,
        send_time,distance,sell_start,distribution_price,average,shop_num,send_score,
        shop_name,shop_type,shop_place,send_service,delete_flag,sell_count)
        values(#{id},5.0,5.0,5.0,#{shop_img},
        #{send_time},#{distance},#{sell_start},#{distribution_price},0,#{shop_num},5.0,
        #{shop_name},#{shop_type},#{shop_place},#{send_service},0,0)
    </insert>

    <update id="shopCount" parameterType="com.xc.takeaway.utils.Shop" >
        update  t_sys_shopinfo
        set sell_count=#{sell_count},average=#{average}
        where shop_num=#{shop_num}
    </update>

    <select id="shopTypelist" parameterType="com.xc.takeaway.utils.Shop" resultType="com.xc.takeaway.utils.Shop">
        SELECT * FROM t_sys_shopinfo WHERE shop_type=#{shop_type} and delete_flag=0 order by shop_score DESC
    </select>

    <select id="byAverage" parameterType="com.xc.takeaway.utils.Shop" resultType="com.xc.takeaway.utils.Shop">
        SELECT * FROM t_sys_shopinfo WHERE shop_type=#{shop_type} and delete_flag=0 order by average ASC
    </select>

    <select id="byDistance" parameterType="com.xc.takeaway.utils.Shop" resultType="com.xc.takeaway.utils.Shop">
        SELECT * FROM t_sys_shopinfo WHERE shop_type=#{shop_type} and delete_flag=0 order by (distance+0) ASC
    </select>

    <select id="getShopCount" resultType="java.util.Map">
        select a.mycreatedate as date,ifnull(b.sell_count,0) as sell_count,ifnull(b.total_price,0) as total_price
        from (
            SELECT curdate() as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 1 day) as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 2 day) as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 3 day) as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 4 day) as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 5 day) as mycreatedate
            union all
            SELECT date_sub(curdate(), interval 6 day) as mycreatedate
        ) as a
        LEFT JOIN (
            select a.shop_num,b.shop_name,convert(a.order_time,char(10)) as date,count(a.order_id) as sell_count,sum(a.total_price) as total_price
            from t_sys_order as a
            inner join t_sys_shopinfo as b on a.shop_num=b.shop_num
            where a.order_time>=date_sub(curdate(), interval 6 day) and a.confirm_state=1 and a.shop_num=#{shopNum}
            group by a.shop_num,date,b.shop_name
        ) as b on a.mycreatedate=b.date
        order by date
    </select>
</mapper>